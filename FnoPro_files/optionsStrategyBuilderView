function main() {
    isSavedStrategy ? loadStrategyBuilderFromJsonDataFromServer() : isCreateNewStrategyPage ? fillPortfolioForNew() : fillTestPortfolio();
    initialize();
    displayPageContents()
}

function displayPageContents() {
    $("#pageContainer").css("visibility", "visible")
}

function initialize() {
    setLinkStyleInAlerts();
    setSaveButtons();
    setChartsDaysFromTodayPlusMinusButtons();
    oneTimeSubscribeToEvents();
    initializeTooltips();
    calculateAllAndSetView()
}

function setLinkStyleInAlerts() {
    $(".alert a").addClass("alert-link")
}

function initializeTooltips() {
    $('[data-toggle="tooltip"]').tooltip()
}

function setSaveButtons() {
    var n = !isSavedStrategy;
    n || isStandardStrategy ? ($("#btnSaveAsNew").removeClass("btn-link").addClass("btn-primary").text(isStandardStrategy ? "Save as New" : "Save").show(), $("#btnSave").hide()) : ($("#btnSave").show(), $("#btnSaveAsNew").addClass("btn-link").show())
}

function onSaveButtonClicked(n) {
    $("#strategyIdHiddenField").val(strategyId);
    $("#saveAsNewHiddenField").val(n);
    saveStrategyBuilderJsonToHiddenField()
}

function saveStrategyBuilderJsonToHiddenField() {
    var n, t = this.strategyBuilder.getDataToSave();
    n = JSON.stringify(t);
    $("#strategyJsonHiddenField").val(n)
}

function loadStrategyBuilderFromJsonDataFromServer() {
    loadStrategyBuilderFromJson(strategyBuilderFromJson)
}

function loadStrategyBuilderFromJson(n) {
    var i = JSON.parse(n),
        t = new options.StrategyBuilder;
    t.readData(i);
    this.strategyBuilder = t
}

function fillTestPortfolio() {
    var t = new options.Position,
        n;
    t.isBuy.value = !0;
    t.quantity.value = 75;
    t.instrument.value = "call";
    t.strike.value = 14000;
    t.daysToExpiry.value = 30;
    n = new options.Position;
    n.isBuy.value = !1;
    n.quantity.value = 75;
    n.instrument.value = "call";
    n.strike.value = 14500;
    n.daysToExpiry.value = 30;
    strategyBuilder.portfolio.addPosition(t);
    strategyBuilder.portfolio.addPosition(n)
}

function fillPortfolioForNew() {
    var n = new options.Position;
    n.isBuy.value = !0;
    n.quantity.value = 75;
    n.instrument.value = "call";
    n.strike.value = 10000;
    n.daysToExpiry.value = 30;
    strategyBuilder.portfolio.addPosition(n)
}

function oneTimeSubscribeToEvents() {
    $(".main_parameters input[type=text]").on("change", onFieldMainParametersChanged);
    $("#btn_add_position").on("click", addNewPosition);
    $(".chart_parameters input[type=text]").on("change", onFieldMainParametersChanged)
}

function subscribeToEvents() {
    $("table input[type=text]").off();
    $("table input[type=text]").on("change", onFieldInTableChanged);
    $("table button").off();
    $("table button").on("click", removePosition);
    $("table select").off();
    $("table select").on("change", onFieldInTableChanged)
}

function setChartsDaysFromTodayPlusMinusButtons() {
    function t() {
        var n = strategyBuilder.portfolio.getMinDaysToExpiry(),
            t = n / i;
        return Math.round(t)
    }
    var n = strategyBuilder.chartDaysFromToday,
        i = 5;
    $(".chart_parameters button.increase").off();
    $(".chart_parameters button.increase").on("click", function() {
        var i = t();
        n.increase(i);
        calculateAllAndSetView()
    });
    $(".chart_parameters button.decrease").off();
    $(".chart_parameters button.decrease").on("click", function() {
        var i = t();
        n.decreaseButNotBelowZero(i);
        calculateAllAndSetView()
    })
}

function onFieldMainParametersChanged() {
    var n = this;
    strategyBuilder[n.id].setValueString(n.value);
    calculateAllAndSetView()
}

function onFieldInTableChanged() {
    var n = this,
        i = n.id,
        t = i.split("."),
        r = t[0],
        u = t[1],
        f = strategyBuilder.portfolio.getPositionById(r),
        e = f[u],
        o = n.value;
    e.setValueString(o);
    calculateAllAndSetView()
}

function removePosition() {
    var n = this,
        t = n.id,
        i = t.split("."),
        r = i[1];
    strategyBuilder.portfolio.removePosition(r);
    calculateAllAndSetView()
}

function addNewPosition() {
    var n = new options.Position;
    strategyBuilder.portfolio.addPosition(n);
    calculateAllAndSetView()
}

function calculateAllAndSetView() {
    strategyBuilder.calculate();
    setView()
}

function setView() {
    setViewMainFields();
    setViewPortfolioTable();
    setViewChartFields();
    setChart();
    setViewChartTable()
}

function setViewMainFields() {
    $(".main_parameters input[type=text]").each(setViewField)
}

function setViewChartFields() {
    $(".chart_parameters input[type=text]").each(setViewField);
    strategyBuilder.autoXMin && $("#xMin").val("");
    strategyBuilder.autoXMax && $("#xMax").val("")
}

function setViewField() {
    var n = this,
        t = n.id,
        i = strategyBuilder[t];
    setViewFieldFromParameter(n, i)
}

function setViewPortfolioTable() {
    var r = performance.now(),
        n, t, i;
    removeAllRowsFromPortfolioTable();
    n = $("<tbody />");
    $.each(strategyBuilder.portfolio.positions, function() {
        var t = this,
            i = createTrForPosition(t);
        n.append(i)
    });
    t = createTotalRow();
    n.append(t);
    $("#portfolio_table").append(n);
    subscribeToEvents();
    i = performance.now() - r;
    console.log(i)
}

function removeAllRowsFromPortfolioTable() {
    removeAllRowsFromTable("#portfolio_table")
}

function removeAllRowsFromTable(n) {
    $(n + " tbody").remove()
}

function createTrForPosition(n) {
    var i = n.positionId,
        r = n.isOption(),
        s = n.isStock(),
        t = $("<tr><\/tr>", {
            id: i
        }),
        h = n.isBuy.value,
        e, f, u, o;
    return td = $("<td />").append(createSelectControl(i + ".isBuy", [
        ["true", "Buy"],
        ["false", "Sell"]
    ], h)), t.append(td), td = $("<td><\/td>").append(createTextBox(i + ".quantity", n.quantity.getValueString())), t.append(td), e = n.instrument.value, td = $("<td />").append(createSelectControl(i + ".instrument", [
        ["call", "Call"],
        ["put", "Put"],
        ["stock", "Stock"]
    ], e)), t.append(td), td = $("<td />"), r && td.append(createTextBox(i + ".strike", n.strike.getValueString())), t.append(td), td = $("<td><\/td>"), r && td.append(createTextBox(i + ".daysToExpiry", n.daysToExpiry.getValueString())), t.append(td), td = $("<td><\/td>"), r && (td.append(createTextBox(i + ".volatility", n.volatility.getValueString())), f = $(td).find("input"), n.isPremiumFixed ? f.attr("title", "This is the implied volatility calculated using the entered premium.") : f.addClass("bold").attr("title", "Volatility is fixed. The premium will be calculated.")), t.append(td), td = $("<td><\/td>").append(createTextBox(i + ".premium", n.premium.getValueString())), u = $(td).find("input"), r && (n.isPremiumFixed ? u.addClass("bold").attr("title", "The premium is fixed. Implied volatility will be calculated.") : u.attr("title", "The premium is calculated with the Black-Scholes model using the entered volatility.")), s && u.attr("title", "The price of the stock at which you buy or sell it."), t.append(td), td = $("<td><\/td>").text(n.debitCredit.getValueString()), t.append(td), o = createRemoveButtonTd("removeButton." + i), t.append(o), t
}

function createTotalRow() {
    var n = $("<tr><\/tr>"),
        t = strategyBuilder.portfolio.totalPosition;
    return n.append($("<td><b>Total<\/b><\/td><td><\/td><td><\/td><td><\/td><td><\/td><td><\/td><td><\/td><td><b>" + t.debitCredit.getValueString() + "<\/b><\/td><td><\/td>")), n
}

function createRemoveButtonTd(n) {
    var t = $("<td />", {
            "class": "removeButtonTd"
        }),
        i = $("<button />", {
            "class": "btn btn-link",
            id: n
        }),
        r = $("<span />", {
            "class": "glyphicon glyphicon-remove"
        });
    return t.append(i.append(r)), t
}

function createTextBox(n, t) {
    return view.createTextBox(n, t, "form-control")
}

function createSelectControl(n, t, i) {
    return view.createSelectControl(n, t, i, "form-control")
}

function setChart() {
    var i = createXyGraphArrayToday(),
        r = strategyBuilder.createXyGraphArrayAtExpiry(),
        n, u = strategyBuilder.chartDaysFromToday.value,
        t;
    n = u === 0 ? "Today" : "In " + strategyBuilder.chartDaysFromToday.getValueString() + " Days";
    t = "At Expiry";
    chart = new Highcharts.Chart({
        chart: {
            renderTo: "highChartsContainer",
            type: "scatter",
            zoomType: "xy"
        },
        title: {
            text: null
        },
        xAxis: {
            title: {
                enabled: !0,
                text: "Price"
            },
            minPadding: 0,
            maxPadding: 0,
            startOnTick: !1,
            endOnTick: !1,
            showLastLabel: !0
        },
        yAxis: {
            title: {
                text: "Profit / Loss"
            },
            minorGridLineWidth: "0px",
            plotLines: [{
                color: "rgb(180, 180, 180)",
                width: 2,
                value: 0,
                zIndex: 1
            }]
        },
        legend: {
            layout: "vertical",
            align: "left",
            verticalAlign: "top",
            x: 10000,
            y: 70,
            floating: !0,
            backgroundColor: Highcharts.theme && Highcharts.theme.legendBackgroundColor || "#FFFFFF",
            borderWidth: 1
        },
        plotOptions: {
            scatter: {
                animation: !1,
                lineWidth: 3,
                allowPointSelect: !0,
                marker: {
                    radius: 0,
                    states: {
                        hover: {
                            enabled: !0,
                            lineColor: "rgb(100,100,100)"
                        }
                    }
                },
                states: {
                    hover: {
                        marker: {
                            enabled: !1
                        }
                    }
                },
                tooltip: {
                    headerFormat: "<b>{series.name}<\/b><br>",
                    pointFormat: "Price = {point.x}<br />Profit / Loss = {point.y}"
                }
            }
        },
        series: [{
            name: n,
            data: i
        }, {
            name: t,
            data: r
        }]
    })
}

function createXyGraphArrayToday() {
    return strategyBuilder.createMvOrPlXyPoints()
}

function setViewChartTable() {
    var n = $("#chart_table"),
        t;
    displayChartTable ? (removeAllRowsFromTable("#chart_table"), t = createXyGraphArrayToday(), $.each(t, function(t, i) {
        var r = createTrForXy(i[0], i[1]);
        n.append(r)
    })) : n.remove()
}

function createTrForXy(n, t) {
    return $("<tr />").append($("<td />").text(math.roundAndToString(n, 4, !0))).append($("<td />").text(math.roundAndToString(t, 4, !0)))
}
var strategyBuilder, chart, displayChartTable;
$(main);
strategyBuilder = new options.StrategyBuilder;
displayChartTable = !1